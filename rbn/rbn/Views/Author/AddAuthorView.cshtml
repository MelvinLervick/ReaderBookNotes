@model rbn.Views.ViewModels.AuthorViewModel

@{
  ViewBag.Title = "Author Maintenance";
  Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm( "AddAuthorView", "Author", FormMethod.Post ))
{
  @Html.AntiForgeryToken()
  @Html.ValidationSummary( true )
  <div class="Author">
    @if (Model.Author.AuthorId > 0)
    {
      <h2>Update Author</h2>
    }
    else
    {
      <h2>Add New Author</h2>
    }

    @if (Model.Message != string.Empty)
    {
      <div class="Message">@Html.ValueFor( model => model.Message )</div>
    }

    <div class="Edit">
      <fieldset>
        <legend>@ViewBag.Title</legend>
        @Html.HiddenFor( m => m.Author )
        @Html.HiddenFor( m => m.Author.AuthorId )
        @Html.HiddenFor( m => m.Author.Enabled )
        <ol>
          <li>
            @Html.LabelFor( m => m.Author.FirstName, new { style = "display:inline-block; width: 125px;" } )
            @Html.TextBoxFor( m => m.Author.FirstName, new { style = "width: 225px;" } )
            @Html.ValidationMessageFor( m => m.Author.FirstName )
          </li>
          <li>
            @Html.LabelFor( m => m.Author.MiddleName, new { style = "display:inline-block; width: 125px;" } )
            @Html.TextBoxFor( m => m.Author.MiddleName, new { style = "width: 175px;" } )
          </li>
          <li>
            @Html.LabelFor( m => m.Author.LastName, new { style = "display:inline-block; width: 125px;" } )
            @Html.TextBoxFor( m => m.Author.LastName, new { style = "width: 225px;" } )
            @Html.ValidationMessageFor( m => m.Author.LastName )
          </li>
        </ol>

        <p>
          @if (Model.Author.AuthorId > 0)
          {
            <input name="saveAuthorDetails" type="submit" value="Save Author Changes" />
          }
          else
          {
            <input name="saveAuthorDetails" type="submit" value="Save New Author" />
          }
        </p>
      </fieldset>

      <div>
        @Html.ActionLink( "Back to Author List", "Index" )
      </div>
    </div>
  </div>
}

@section Scripts {
  @Scripts.Render( "~/bundles/jqueryval" )
}
