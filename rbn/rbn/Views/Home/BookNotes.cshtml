@model rbn.Models.ReaderNotesModel

@{
  ViewBag.Title = "Reader Book Notes";
  Layout = "~/Views/Shared/_LayoutBooks.cshtml";
}

<div class="Notes">
  @using (Html.BeginForm( "BookNotes", "Home", FormMethod.Post, new { id = "BookNotes" } ))
  {
    <fieldset>
      <legend>@ViewBag.Title</legend>
      <h2>@ViewBag.Title</h2>
      <h3>&nbsp;for&nbsp;</h3>
      <div class="ReaderAlias">
        @Html.DropDownList( "ReaderId", ViewBag.ReaderId as SelectList,
          htmlAttributes: new { @disabled="disabled" } )
      </div>
      @Html.LabelFor( model => model.ReaderRating, new { @class = "LabelReaderRating" } )
      <div class="ReaderRating">@Model.ReaderRating</div>

      @Html.AntiForgeryToken()

      @Html.HiddenFor( model => model.ReaderNoteId )
      @Html.HiddenFor( model => model.BookId )
      @Html.HiddenFor( model => model.Title )
      @Html.HiddenFor( model => model.AuthorId )
      @Html.HiddenFor( model => model.AuthorName )
      @Html.HiddenFor( model => model.ReviewerCommentRating )
      @Html.HiddenFor( model => model.ReviewerBookRating )
      @Html.HiddenFor( model => model.ReaderRating )
      @Html.HiddenFor( model => model.BookRating )
      @Html.HiddenFor( model => model.AudienceId )

      <div class="AuthorTitleRating">
        @Html.LabelFor( model => model.Title, new { @class = "LabelTitle" } )
        <div class="Title">@Model.Title</div>
        @Html.LabelFor( model => model.AuthorName, new { @class = "LabelAuthor" } )
        <div class="LabelAuthorName">@Model.AuthorName</div>
        @Html.LabelFor( model => model.BookRating, new { @class = "LabelBookRating" } )
        <div class="BookRating">@Model.BookRating</div>
      </div>

      @if ((Model.ReaderNoteId == 0) && (Model.BookId > 0) && (Roles.GetRolesForUser( User.Identity.Name ).Contains( "Administrator" ) || Roles.GetRolesForUser( User.Identity.Name ).Contains( "Contributor" )))
      {
        <div class="contributorNotes">
          @Html.TextAreaFor( model => model.Note, new { @class = "contributorNoteEdit" } )
          @Html.ValidationMessageFor( model => model.Note, "You must enter a comment before selecting 'Save New Note'.", htmlAttributes: new { @class = "ValidationMessageNote"} )
        </div>
      }
      else
      {
        <div class="readerNotes">
          @Html.TextAreaFor( model => model.Note, new { @readonly="readonly", @class = "readerNoteEdit" } )
        </div>
      }
      <div class="Audience">
        <input type="submit" class="Previous" name="buttons" value="Previous" />
        @Html.TextBoxFor( model => model.Page, new { @class = "PageCurrent", @readonly = "readonly" } )
        @Html.Label( "of", new { @class = "PageOf" } )
        @Html.TextBoxFor( model => model.TotalPages, new { @class = "PagesTotal", @readonly = "readonly" } )
        <input type="submit" class="Next" name="buttons" value="Next" />
        @Html.LabelFor( model => model.AudienceId, new { @class = "Label" } )
        @if (Roles.GetRolesForUser( User.Identity.Name ).Contains( "Administrator" ) || Roles.GetRolesForUser( User.Identity.Name ).Contains( "Contributor" ) )
        {
          if ( (Model.ReaderNoteId == 0) && (Model.BookId > 0) )
          {
            @Html.DropDownListFor( model => model.AudienceId, ViewBag.AudienceId as SelectList, "--Select Audience--" )
            @Html.ValidationMessage( "AudienceId", "An Audience must be selected.", htmlAttributes: new { @class = "ValidationMessage1"} )
            @Html.LabelFor( model => model.Notify, new {@class = "NotifyLabel"} )
            @Html.CheckBoxFor( model => model.Notify, new {@class = "Notify"} )
            <input type="submit" class="Save" name="buttons" value="Save New Note" />
            <input type="submit" class="Cancel cancel" name="buttons" value="Cancel" />
          }
          else
          {
            if ( Model.BookId > 0 )
            {
              @Html.DropDownListFor( model => model.AudienceId, ViewBag.AudienceId as SelectList, "--Select Audience--", htmlAttributes: new {@disabled = "disabled"} )
              <input type="submit" class="Add" name="buttons" value="Add New Note" />
            }
          }
        }
        else
        {
          @Html.DropDownListFor( model => model.AudienceId, ViewBag.AudienceId as SelectList, "--Select Audience--", htmlAttributes: new { @disabled = "disabled" } )
        }
      </div>
      @if ( (Model.BookId > 0) && (Roles.GetRolesForUser( User.Identity.Name ).Contains( "Administrator" ) || Roles.GetRolesForUser( User.Identity.Name ).Contains( "Contributor" )) )
      {
        <div class="ReviewerRatingBlock">
          @Html.Label( "Please Rate (where 9 is best)", new {@class = "LabelRatingFixed"} )
          <div class="ReviewerRating">
            <div class="inline">
              @Html.LabelFor( model => model.ReviewerCommentRating, new {@class = "LabelRating"} )
              @for ( var i = 1; i < 10; i++ )
              {
                <input type="submit" name="buttons" value="@i.ToString()" />
              }
            </div>
            <div class="inline">
              @Html.LabelFor( model => model.ReviewerBookRating, new {@class = "LabelBookRating"} )
              @for ( var i = 1; i < 10; i++ )
              {
                <input type="submit" name="bookButtons" value="@i.ToString()" />
              }
            </div>
          </div>
        </div>
      }
    </fieldset>
  }
</div>

@section Scripts {
  @Scripts.Render( "~/bundles/jqueryval" )
}

